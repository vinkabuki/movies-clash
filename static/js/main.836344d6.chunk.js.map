{"version":3,"sources":["data-context.tsx","Api.tsx","Header.tsx","MovieCard.tsx","MoviesCards.tsx","Body.tsx","Footer.tsx","Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MoviesDataContext","React","createContext","useState","movies","setMovies","useEffect","axios","get","then","response","data","catch","err","console","log","id","put","Logo","ItemBox","styled","div","CoverImage","img","MovieTitle","h1","Summary","p","MainButton","button","props","bgcolor","MovieCard","item","onAcceptHandler","onRejectHandler","handler","useSwipeable","onSwiped","src","imageURL","alt","title","summary","rating","onClick","MoviesCards","count","setCount","currentItem","setCurrentItem","length","api","Body","Consumer","Layout","Header","Footer","App","Provider","value","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.836344d6.chunk.js","sourcesContent":["import React from 'react'\n\nconst data = []\n\nexport const MoviesDataContext = React.createContext<Array<object>>(data)\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst FetchMovies = () => {\n  const [movies, setMovies] = useState([])\n\n  useEffect(() => {\n    axios\n      .get('https://my-json-server.typicode.com/vinkabuki/ti/recommendations')\n      .then(response => {\n        setMovies(response.data)\n        return response.data\n      })\n      .catch(err => console.log(err))\n  }, [])\n  return movies\n}\n\nconst acceptMovie = (id: string) => {\n  axios.put(`http://localhost:8000/recommendations/${id}/accept/`).catch(err => console.log(err))\n}\nconst rejectMovie = (id: string) => {\n  axios.put(`http://localhost:8000/recommendations/${id}/reject/`).catch(err => console.log(err))\n}\n\nexport default {\n  fetchMovies: FetchMovies,\n  acceptMovie,\n  rejectMovie\n}\n","import React from 'react'\n\nfunction Logo () {\n  return <h2>LOGO</h2>\n}\n\nexport default Logo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useSwipeable } from 'react-swipeable'\nconst ItemBox = styled.div`\n  background-color: blue;\n  max-width: 500px;\n  margin: auto;\n  padding: 30px;\n`\nconst CoverImage = styled.img`\n  width: 100%;\n`\nconst MovieTitle = styled.h1`\n  text-align: left;\n`\nconst Summary = styled.p`\n  text-align: left;\n`\nconst MainButton = styled.button`\n  width: 50%;\n  background-color: ${(props) => props.bgcolor};\n`\n\ninterface IProps {\n  item: {\n    id: string\n    imageURL: string\n    title: string\n    summary: string\n    rating: string\n  }\n  onAcceptHandler: any\n  onRejectHandler: any\n  //handler: any\n}\n\nexport const MovieCard = ({ item, onAcceptHandler, onRejectHandler }: IProps) => {\n  const handler = useSwipeable({\n    onSwiped: () => {\n      console.log('swiped')\n    }\n  })\n\n  return (\n    <ItemBox {...handler}>\n      <CoverImage src={item.imageURL} alt=\"there is no cover image for this movie, sorry\" />\n      <MovieTitle>{item.title}</MovieTitle>\n      <Summary>{item.summary}</Summary>\n      <h2>{item.rating}/10</h2>\n      <MainButton onClick={() => onRejectHandler(item.id)} bgcolor=\"red\">\n        Reject\n      </MainButton>\n      <MainButton onClick={() => onAcceptHandler(item.id)} bgcolor=\"green\">\n        Accept\n      </MainButton>\n    </ItemBox>\n  )\n}\n\nexport default MovieCard\n","import React, { useState, useEffect } from 'react'\nimport { useSwipeable } from 'react-swipeable'\nimport MovieCard from './MovieCard'\nimport api from './Api'\n\ninterface items {\n  movies: Array<object>\n}\n\nfunction MoviesCards(props: items) {\n  const { movies } = props\n  const [count, setCount] = useState(0)\n  const [currentItem, setCurrentItem] = useState(null)\n\n  const handler = useSwipeable({\n    onSwiped: () => {\n      console.log('swiped')\n    }\n  })\n\n  useEffect(() => {\n    setCurrentItem(movies[count])\n  }, [movies, count])\n\n  const onAcceptHandler = (id: string) => {\n    api.acceptMovie(id)\n    setCount(count + 1)\n  }\n  const onRejectHandler = (id: string) => {\n    api.rejectMovie(id)\n    setCount(count + 1)\n  }\n  if (currentItem === null) {\n    return <div>waiter</div>\n  } else if (count === movies.length) {\n    return <div>there is no more items</div>\n  } else {\n    return (\n      <MovieCard\n        {...handler}\n        item={currentItem}\n        onAcceptHandler={onAcceptHandler}\n        onRejectHandler={onRejectHandler}\n      ></MovieCard>\n    )\n  }\n}\n\nexport default MoviesCards\n","import React from 'react'\nimport MoviesCards from './MoviesCards'\nimport { MoviesDataContext } from './data-context'\n\nconst Body: React.FC = () => {\n  return (\n    <div>\n      <MoviesDataContext.Consumer>{movies => <MoviesCards movies={movies} />}</MoviesDataContext.Consumer>\n    </div>\n  )\n}\n\nexport default Body\n","import React from 'react'\n\nfunction Logo () {\n  return <h2>LOGO</h2>\n}\n\nexport default Logo\n","import React from 'react'\nimport Header from './Header'\nimport Body from './Body'\nimport Footer from './Footer'\n\nconst Layout: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  )\n}\n\nexport default Layout\n","import React from 'react'\nimport { MoviesDataContext } from './data-context'\nimport api from './Api'\nimport Layout from './Layout'\n\nfunction App () {\n  const movies: Array<object> = api.fetchMovies()\n\n  if (movies.length === 0) {\n    return <div>wait for data</div>\n  } else {\n    return (\n      <MoviesDataContext.Provider value={movies}>\n        <div className='App'>\n          <Layout />\n        </div>\n      </MoviesDataContext.Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}