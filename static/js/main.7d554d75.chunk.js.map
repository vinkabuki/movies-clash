{"version":3,"sources":["data-context.tsx","Api.tsx","Header.tsx","MovieCard.tsx","MoviesCards.tsx","Body.tsx","Footer.tsx","Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MoviesDataContext","React","createContext","useState","movies","setMovies","useEffect","axios","get","then","response","data","catch","err","console","log","id","put","Logo","ItemBox","styled","div","props","imgSrc","Kontener","isVisible","MovieTitle","h1","themek","Summary","p","Rating","Spanke","span","SecondaryButton","button","Expander","MovieCard","item","expand","setExpand","imageURL","title","rating","summary","onClick","ButtonsBox","MainButton","MoviesCards","count","setCount","currentItem","setCurrentItem","onRejectHandler","api","handler","useSwipeable","onSwipedLeft","onSwipedRight","length","viewBox","width","height","focusable","aria-hidden","role","d","fill","BodyBox","Body","Consumer","Layout","Header","Footer","App","Provider","value","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7d554d75.chunk.js","sourcesContent":["import React from 'react'\n\nconst data = []\n\nexport const MoviesDataContext = React.createContext<Array<object>>(data)\n","import { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst FetchMovies = () => {\n  const [movies, setMovies] = useState([])\n\n  useEffect(() => {\n    axios\n      .get(`https://frozen-inlet-56856.herokuapp.com/recommendations`)\n      .then((response) => {\n        setMovies(response.data)\n        return response.data\n      })\n      .catch((err) => console.log(err))\n  }, [])\n  return movies\n}\n\nconst acceptMovie = (id: string) => {\n  axios.put(`https://frozen-inlet-56856.herokuapp.com/recommendations/${id}/accept/`).catch((err) => console.log(err))\n}\nconst rejectMovie = (id: string) => {\n  axios.put(`https://frozen-inlet-56856.herokuapp.com/recommendations/${id}/reject/`).catch((err) => console.log(err))\n}\n\nexport default {\n  fetchMovies: FetchMovies,\n  acceptMovie,\n  rejectMovie\n}\n","import React from 'react'\n\nfunction Logo () {\n  return <h2>LOGO</h2>\n}\n\nexport default Logo\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst ItemBox = styled.div`\n  position: relative;\n  max-width: 400px;\n  margin: auto;\n  border-radius: 10px;\n  overflow: hidden;\n  background-image: url(${(props) => props.imgSrc});\n  background-size: 100%;\n  background-repeat: no-repeat;\n  min-height: 580px;\n  @media (max-width: 400px) {\n    min-height: calc(100vw * 1.45);\n  }\n  box-shadow: 10px 7px 65px -13px rgba(0, 0, 0, 0.75);\n`\n\nconst Kontener = styled.div`\n  padding: 20px;\n  position: absolute;\n  bottom: 20px;\n  display: ${(props) => {\n    if (!props.isVisible) {\n      return 'none'\n    }\n  }};\n`\n\nconst MovieTitle = styled.h1`\n  text-align: left;\n  color: ${(props) => (props.themek ? 'white' : 'black')};\n  display: block;\n`\nconst Summary = styled.p`\n  text-align: left;\n  color: ${(props) => (props.themek ? 'white' : 'black')};\n  display: block;\n`\n\nconst Rating = styled.p`\n  text-align: left;\n  color: ${(props) => (props.themek ? 'white' : 'black')};\n  display: block;\n`\nconst Spanke = styled.span`\n  background-color: rgba(0, 0, 0, 0.75);\n`\nconst SecondaryButton = styled.button`\n  position: absolute;\n  right: 30px;\n  bottom: 30px;\n  border-radius: 20px;\n  padding: 20px;\n  cursor: pointer;\n  border: none;\n  font-size: 18px;\n  outline: 0;\n  box-shadow: 0 0 0 0 rgba(0, 0, 0, 1);\n  transform: scale(1);\n  animation: pulse 2s infinite;\n  @keyframes pulse {\n    0% {\n      transform: scale(0.95);\n      box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);\n    }\n\n    70% {\n      transform: scale(1);\n      box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);\n    }\n\n    100% {\n      transform: scale(0.95);\n      box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);\n    }\n  }\n`\nconst Expander = styled.div`\n  box-sizing: border-box;\n  padding: 40px;\n  max-width: 400px;\n  width: 100%;\n  margin: auto;\n  margin-top: 590px;\n  @media (max-width: 400px) {\n    margin-top: calc(100vw * 1.45);\n  }\n\n  display: ${(props) => {\n    if (props.isVisible) {\n      return 'none'\n    }\n  }};\n`\n\ninterface IProps {\n  item: {\n    id: string\n    imageURL: string\n    title: string\n    summary: string\n    rating: string\n  }\n}\n\nexport const MovieCard = ({ item }: IProps) => {\n  const [expand, setExpand] = useState(true)\n\n  const Expand = () => {\n    if (expand) {\n      setExpand(false)\n    } else {\n      setExpand(true)\n    }\n  }\n\n  return (\n    <>\n      <ItemBox imgSrc={item.imageURL}>\n        <Kontener isVisible={expand}>\n          <MovieTitle themek={expand}>\n            <Spanke>{item.title}</Spanke>\n          </MovieTitle>\n          <Rating themek={expand}>\n            <Spanke>{item.rating}/10</Spanke>\n          </Rating>\n          <Summary themek={expand}>\n            <Spanke>{item.summary}</Spanke>\n          </Summary>\n        </Kontener>\n        <SecondaryButton\n          onClick={() => {\n            Expand()\n          }}\n        >\n          i\n        </SecondaryButton>\n        <Expander isVisible={expand}>\n          <MovieTitle themek={expand}>{item.title}</MovieTitle>\n          <Rating themek={expand}>{item.rating}/10</Rating>\n          <Summary themek={expand}>{item.summary}</Summary>\n        </Expander>\n      </ItemBox>\n    </>\n  )\n}\n\nexport default MovieCard\n","import React, { useState, useEffect } from 'react'\nimport { useSwipeable } from 'react-swipeable'\nimport styled from 'styled-components'\nimport MovieCard from './MovieCard'\nimport api from './Api'\n\nconst ButtonsBox = styled.div``\n\nconst MainButton = styled.button`\n  width: 100px;\n  height: 100px;\n  border-radius: 90%;\n  border: none;\n  cursor: pointer;\n  margin: 20px 40px;\n  outline: none;\n  background-color: white;\n  box-sizing: border-box;\n  box-shadow: 10px 7px 65px -13px rgba(0, 0, 0, 0.75);\n`\n\ninterface items {\n  movies: Array<object>\n}\n\nfunction MoviesCards(props: items) {\n  const { movies } = props\n  const [count, setCount] = useState(0)\n  const [currentItem, setCurrentItem] = useState(null)\n\n  useEffect(() => {\n    setCurrentItem(movies[count])\n  }, [movies, count])\n\n  const onAcceptHandler = (id: string) => {\n    api.acceptMovie(id)\n    setCount(count + 1)\n  }\n  const onRejectHandler = (id: string) => {\n    api.rejectMovie(id)\n    setCount(count + 1)\n  }\n  const handler = useSwipeable({\n    onSwipedLeft: () => {\n      console.log('swiprd')\n      onRejectHandler(currentItem.id)\n    },\n    onSwipedRight: () => {\n      onRejectHandler(currentItem.id)\n    }\n  })\n  if (currentItem === null) {\n    return <div>waiter</div>\n  } else if (count === movies.length) {\n    return <div>there is no more items</div>\n  } else {\n    return (\n      <>\n        <div {...handler}>\n          <MovieCard item={currentItem}></MovieCard>\n        </div>\n        <ButtonsBox>\n          <MainButton onClick={() => onRejectHandler(currentItem.id)}>\n            <svg\n              viewBox=\"0 0 24 24\"\n              width=\"24px\"\n              height=\"24px\"\n              focusable=\"false\"\n              aria-hidden=\"true\"\n              role=\"presentation\"\n            >\n              <path\n                d=\"M14.926 12.56v-1.14l5.282 5.288c1.056.977 1.056 2.441 0 3.499-.813 1.057-2.438 1.057-3.413 0L11.512 15h1.138l-5.363 5.125c-.975 1.058-2.438 1.058-3.495 0-1.056-.813-1.056-2.44 0-3.417l5.201-5.288v1.14L3.873 7.27c-1.137-.976-1.137-2.44 0-3.417a1.973 1.973 0 0 1 3.251 0l5.282 5.207H11.27l5.444-5.207c.975-1.139 2.438-1.139 3.413 0 1.057.814 1.057 2.44 0 3.417l-5.2 5.288z\"\n                fill=\"purple\"\n              ></path>\n            </svg>\n          </MainButton>\n          <MainButton onClick={() => onAcceptHandler(currentItem.id)}>\n            <svg\n              viewBox=\"0 0 24 24\"\n              width=\"24px\"\n              height=\"24px\"\n              focusable=\"false\"\n              aria-hidden=\"true\"\n              role=\"presentation\"\n            >\n              <path\n                d=\"M21.994 10.225c0-3.598-2.395-6.212-5.72-6.212-1.78 0-2.737.647-4.27 2.135C10.463 4.66 9.505 4 7.732 4 4.407 4 2 6.62 2 10.231c0 1.52.537 2.95 1.533 4.076l8.024 7.357c.246.22.647.22.886 0l7.247-6.58.44-.401.162-.182.168-.174a6.152 6.152 0 0 0 1.54-4.09\"\n                fill=\"green\"\n              ></path>\n            </svg>\n          </MainButton>\n        </ButtonsBox>\n      </>\n    )\n  }\n}\n\nexport default MoviesCards\n","import React from 'react'\nimport MoviesCards from './MoviesCards'\nimport { MoviesDataContext } from './data-context'\nimport styled from 'styled-components'\n\nconst BodyBox = styled.div`\n  max-width: 400px;\n  margin: auto;\n  text-align: center;\n`\n\nconst Body: React.FC = () => {\n  return (\n    <BodyBox>\n      <MoviesDataContext.Consumer>{(movies) => <MoviesCards movies={movies} />}</MoviesDataContext.Consumer>\n    </BodyBox>\n  )\n}\n\nexport default Body\n","import React from 'react'\n\nfunction Logo () {\n  return <h2>LOGO</h2>\n}\n\nexport default Logo\n","import React from 'react'\nimport Header from './Header'\nimport Body from './Body'\nimport Footer from './Footer'\n\nconst Layout: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <Body />\n      <Footer />\n    </div>\n  )\n}\n\nexport default Layout\n","import React from 'react'\nimport { MoviesDataContext } from './data-context'\nimport api from './Api'\nimport Layout from './Layout'\n\nfunction App () {\n  const movies: Array<object> = api.fetchMovies()\n\n  if (movies.length === 0) {\n    return <div>wait for data</div>\n  } else {\n    return (\n      <MoviesDataContext.Provider value={movies}>\n        <div className='App'>\n          <Layout />\n        </div>\n      </MoviesDataContext.Provider>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}