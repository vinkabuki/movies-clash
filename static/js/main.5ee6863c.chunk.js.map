{"version":3,"sources":["Item.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ItemBox","styled","div","ImageBox","img","MovieTitle","h1","Summary","p","Button","button","props","bgcolor","Item","id","imageURL","title","summary","rating","onAccept","onReject","src","onClick","App","useState","count","setCount","movies","setMovies","currentItem","setCurrentItem","useEffect","axios","get","then","response","data","length","className","put","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wxBAGA,IAAMA,EAAUC,IAAOC,IAAV,KAMPC,EAAWF,IAAOG,IAAV,KAGRC,EAAaJ,IAAOK,GAAV,KAGVC,EAAUN,IAAOO,EAAV,KAGPC,EAASR,IAAOS,OAAV,KAEU,SAACC,GAAD,OAAWA,EAAMC,WAiDxBC,EAjBK,SAAC,GAAyE,IAAvEC,EAAsE,EAAtEA,GAAIC,EAAkE,EAAlEA,SAAUC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SACrE,OACE,kBAACpB,EAAD,KACE,kBAACG,EAAD,CAAUkB,IAAKN,IACf,kBAACV,EAAD,KAAaW,GACb,kBAACT,EAAD,KAAUU,GACV,4BAAKC,EAAL,OACA,kBAACT,EAAD,CAAQa,QAAS,kBAAMF,EAASN,IAAKF,QAAQ,OAA7C,UAGA,kBAACH,EAAD,CAAQa,QAAS,kBAAMH,EAASL,IAAKF,QAAQ,SAA7C,YCNSW,MAjDf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGyBJ,mBAAS,MAHlC,mBAGNK,EAHM,KAGOC,EAHP,KA4Bb,OAvBAC,qBAAU,WACRC,IAAMC,IAAI,qDAAqDC,MAAK,SAACC,GACnEP,EAAUO,EAASC,MACnBN,EAAeK,EAASC,KAAK,SAE9B,IAEHL,qBAAU,WACY,OAAhBF,GACFC,EAAeH,EAAOF,MAEvB,CAACI,EAAaF,EAAQF,IAYL,OAAhBI,EACK,qCACEJ,IAAUE,EAAOU,OACnB,wDAGL,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACExB,GAAIe,EAAYf,GAChBC,SAAUc,EAAYd,SACtBC,MAAOa,EAAYb,MACnBC,QAASY,EAAYZ,QACrBC,OAAQW,EAAYX,OACpBC,SAvBS,SAACL,GAChBkB,IAAMO,IAAN,gCAA2C,CAAEzB,GAAIA,IACjDY,EAASD,EAAQ,IAsBXL,SAnBS,SAACN,GAChBkB,IAAMO,IAAN,gDAAmDzB,EAAnD,aACAY,EAASD,EAAQ,QCpBDe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAACmB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ee6863c.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst ItemBox = styled.div`\n  background-color: aquamarine;\n  max-width: 500px;\n  margin: auto;\n  padding: 30px;\n`\nconst ImageBox = styled.img`\n  width: 100%;\n`\nconst MovieTitle = styled.h1`\n  text-align: left;\n`\nconst Summary = styled.p`\n  text-align: left;\n`\nconst Button = styled.button`\n  width: 50%;\n  background-color: ${(props) => props.bgcolor};\n`\n/* \nfunction Item({ id, imageURL, title, summary, rating, onAccept, onReject }) {\n  console.log(imageURL)\n  return (\n    <ItemBox>\n    <ImageBox src={imageURL} />\n    <MovieTitle>{title}</MovieTitle>\n    <Summary>{summary}</Summary>\n    <h2>{rating}/10</h2>\n    <Button onClick={() => onReject(id)} bgcolor=\"red\">\n    Reject\n    </Button>\n    <Button onClick={() => onAccept(id)} bgcolor=\"green\">\n    Accept\n    </Button>\n    </ItemBox>\n    )\n  }\n  */\n\ninterface items {\n  id: string\n  imageURL: string\n  title: string\n  summary: string\n  rating: number\n  onReject: any\n  onAccept: any\n}\n\nexport const Item = ({ id, imageURL, title, summary, rating, onAccept, onReject }: items) => {\n  return (\n    <ItemBox>\n      <ImageBox src={imageURL} />\n      <MovieTitle>{title}</MovieTitle>\n      <Summary>{summary}</Summary>\n      <h2>{rating}/10</h2>\n      <Button onClick={() => onReject(id)} bgcolor=\"red\">\n        Reject\n      </Button>\n      <Button onClick={() => onAccept(id)} bgcolor=\"green\">\n        Accept\n      </Button>\n    </ItemBox>\n  )\n}\n\nexport default Item\n","import React, { useEffect, useState } from 'react'\n\nimport axios from 'axios'\nimport Item from './Item'\n\nfunction foo() {}\nfoo()\nfunction App() {\n  const [count, setCount] = useState(0)\n  const [movies, setMovies] = useState([])\n  const [currentItem, setCurrentItem] = useState(null)\n\n  useEffect(() => {\n    axios.get('https://my-json-server.typicode.com/vinkabuki/ti/').then((response) => {\n      setMovies(response.data)\n      setCurrentItem(response.data[0])\n    })\n  }, [])\n\n  useEffect(() => {\n    if (currentItem !== null) {\n      setCurrentItem(movies[count])\n    }\n  }, [currentItem, movies, count])\n\n  const onAccept = (id) => {\n    axios.put(`http://localhost:8000/accept/`, { id: id })\n    setCount(count + 1)\n  }\n\n  const onReject = (id) => {\n    axios.put(`http://localhost:8000/recommendations/${id}/reject/`)\n    setCount(count + 1)\n  }\n\n  if (currentItem === null) {\n    return <div>wait</div>\n  } else if (count === movies.length) {\n    return <div>there is no more movies</div>\n  } else {\n    return (\n      <div className=\"App\">\n        <Item\n          id={currentItem.id}\n          imageURL={currentItem.imageURL}\n          title={currentItem.title}\n          summary={currentItem.summary}\n          rating={currentItem.rating}\n          onAccept={onAccept}\n          onReject={onReject}\n        ></Item>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}